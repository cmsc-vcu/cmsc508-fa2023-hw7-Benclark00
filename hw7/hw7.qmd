---
title: Homework 7 - Creating a resume database
author: Ben Clark
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains information on the resume, or 'user', database we have been tasked with creating. This document also contains and displays the results from a few SQL queries and shows what types of elements are stored in the tables for our boss' assignment for us to create a database.

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Benclark00

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project is the creation and dsiplay of queries for a database that we were tasked to create for our company. The boss thought it would be a good idea to have a place to display our skills, roles, and contact information, as it may speed up business. I appreciate our company and it's aid to help me pay for my student debts, while allowing me to advance my career and i'm very happy to be the one to create this database.

## Crows-foot diagram

This diagram shows that a customer may place none or multiple orders, and each order can only be placed by one customer. Additionally, one or more customer(s) can use one or more delivery address. These together with the specific rows in each table, help to give the viewer a holistic view of placing an order.

```{mermaid}
%%| echo: false
erDiagram
    people ||--o{ skills : posesses
    people }|--|{ roles: has
    skills {
        int skills_id
        string skills_name
        string skills_description
        string skills_tag
        int skills_time_commitment
    }
    people {
        int people_id
        string people_first_name
        string people_last_name
        string people_email
        string people_linkedin_url
        string people_headshot_url
        string people_brief_bio 
        date people_date_joined
    }
    roles {
        int roles_id
        string roles_name
        int sort_priority
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe the current employees information, including their contact information, and a brief bio on each employee.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the skills people working at the company currently possess, the skills present are apart of a general skill set.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the role(s) each employee has at the company, as well as when each employee earned/ was assigned each role.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name


```{python}
sql = f"""
select skills_name, skills_tag, skills_description from skills
order by skills_name;
"""
```


```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
select people_first_name, people_last_name, people_email from people
order by people_last_name;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
sql = f"""
select skills_name from skills join peopleskills on skills_id = peopleskills_skills_id
where peopleskills_people_id = 1;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```
### List people names with Skill 6

```{python}
sql = f"""
select people_first_name as "first name", people_last_name as "last name" from people join peopleskills on people_id = peopleskills_people_id
where peopleskills_skills_id = 6;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
select people_first_name as first_name, people_last_name as last_name from people inner join peopleroles on people.people_id = peopleroles.peopleroles_people_id
where peopleroles.peopleroles_roles_id = 2;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
select people.people_first_name as "first name", people.people_last_name as "last name", people.people_email from people left join peopleskills on people.people_id = peopleskills.peopleskills_people_id
where peopleskills.peopleskills_people_id IS NULL;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
select skills_name, skills_tag from skills left join peopleskills on skills_id = peopleskills_skills_id
where peopleskills_skills_id IS NULL;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
select people.people_first_name as first_name,
people.people_last_name as last_name,
skills.skills_name as name_of_skill from 
people 
join 
peopleroles on people.people_id = peopleroles.peopleroles_people_id
join 
roles on peopleroles.peopleroles_roles_id = roles.roles_id
join 
peopleskills on peopleskills.peopleskills_people_id = people.people_id
join 
skills on peopleskills.peopleskills_skills_id = skills.skills_id
where peopleroles.peopleroles_roles_id = 5;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

select roles.roles_id, roles.roles_name
```{python}
sql = f"""
select roles.roles_id, roles.roles_name from roles
left join
peopleroles on roles.roles_id = peopleroles.peopleroles_roles_id
where peopleroles.peopleroles_roles_id is null;
"""

#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

I thought this assignment built on what we had learned quite quickly. Although it took a bit more effort, this assignment was able to accomplished and wasn't too bad after figuring out how to use the ddl file. I now believe that SQL is a very important tool to have in my developer tool kit after this assignment. For this next assignment and the final project I need to start putting together the necessary work now and not procrastinate. I'm still very excited to see where SQL takes me and I really enjoy the assignments and what I am learning in class.

